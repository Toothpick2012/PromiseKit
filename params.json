{"name":"Promisekit","tagline":"A delightful Promises implementation for iOS","body":"Modern development is highly asynchronous: isn’t it about time iOS developers had tools that made programming asynchronously powerful, easy and delightful?\r\n\r\nPromiseKit is not just a [Promises](http://wikipedia.org/wiki/Promise_%28programming%29) implementation, it is also a collection of helper functions that make the typical asynchronous patterns we use in iOS development delightful *too*.\r\n\r\nPromiseKit is also designed to be integrated into other CocoaPods. If your library has asynchronous operations and you like PromiseKit, then add an opt-in subspec that provides Promises for your users. Documentation to help you integrate PromiseKit into your own pods is provided later in this guide.\r\n\r\n\r\n#Importing PromiseKit\r\n\r\nIn your [Podfile](http://guides.cocoapods.org/using/the-podfile.html):\r\n\r\n```ruby\r\npod 'PromiseKit'\r\n```\r\n\r\nPromiseKit is modulized; if you only want `Promise` and none of our category additions:\r\n\r\n```ruby\r\npod 'PromiseKit/base'\r\n```\r\n\r\nOr if you only want some of our categories:\r\n\r\n```ruby\r\npod 'PromiseKit/Foundation'\r\npod 'PromiseKit/UIKit'\r\npod 'PromiseKit/CoreLocation'\r\npod 'PromiseKit/MapKit'\r\n```\r\n\r\n\r\n#Why Promises?\r\n\r\nSynchronous code is clean code. For example, here's the synchronous code to show a gravatar image:\r\n\r\n```objc\r\nNSString *md5 = md5(email);\r\nNSString *url = [@\"http://gravatar.com/avatar/\" stringByAppendingString:md5];\r\nNSData *data = [NSData dataWithContentsOfURL:[NSURL URLWithString:url]];\r\nself.imageView.image = [UIImage imageWithData:data];\r\n```\r\n\r\nClean but blocking: the UI lags: the user rates you one star.\r\n\r\nThe asynchronous analog suffers from *rightward-drift*:\r\n\r\n```objc\r\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\r\n    NSString *md5 = md5(email);\r\n    NSString *url = [@\"http://gravatar.com/avatar/\" stringByAppendingString:md5];\r\n    NSURLRequest *rq = [NSURLRequest requestWithURL:[NSURL URLWithString:url]];\r\n    [NSURLConnection sendAsynchronousRequest:rq queue:[NSOperationQueue currentQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {\r\n        UIImage *gravatarImage = [UIImage imageWithData:data];\r\n        dispatch_async(dispatch_get_main_queue(), ^{\r\n            self.imageView.image = gravatarImage;\r\n        });\r\n    }];\r\n});\r\n```\r\n\r\nThe code that does the actual work is now buried inside asynchronicity boilerplate. It is harder to read. The code is less clean.\r\n\r\nPromises are chainable, standardized representations of asynchronous tasks. The equivalent code with PromiseKit looks like this:\r\n\r\n```objc\r\n#import \"PromiseKit.h\"\r\n\r\ndispatch_promise(^{\r\n    return md5(email);\r\n}).then(^(NSString *md5){\r\n    return [NSURLConnection GET:@\"http://gravatar.com/avatar/%@\", md5];\r\n}).then(^(UIImage *gravatarImage){\r\n    self.imageView.image = gravatarImage;\r\n});\r\n```\r\n\r\nCode with promises is about as close as we can get to the minimal cleanliness of synchronous code.\r\n\r\n##Explaining That Promise Code\r\n\r\nA `Promise` represents the *future* value of an asynchronous task. To obtain the value of that future, we `then` off the Promise.\r\n\r\n```objc\r\nPromise *promise = dispatch_promise(^{\r\n    // we’re in a background thread\r\n    return md5(email);\r\n});\r\n\r\n// `dispatch_promise` returns a promise representing the future\r\n// value of the block it executes. You can `then` off any\r\n// Promise object and it will receive the previous Promise’s\r\n// value as its parameter.\r\n\r\npromise = promise.then(^(NSString *md5){\r\n    // we’re back in the main thread\r\n    return [NSURLConnection GET:@\"http://gravatar.com/avatar/%@\", md5];\r\n});\r\n\r\n// The previous `then` returned a Promise. The next Promise\r\n// will not execute any `then`s until that Promise is fulfilled.\r\n\r\npromise.then(^(UIImage *gravatarImage){\r\n    // The previous promise has fulfilled and provided\r\n    // a `UIImage`. So lets finish and set the Gravatar.\r\n    self.imageView.image = gravatarImage;\r\n});\r\n```\r\n\r\n#Error Handling\r\n\r\nSynchronous code has simple, clean error handling:\r\n\r\n```objc\r\n@try {\r\n    id md5 = md5(email);\r\n    id url = [@\"http://gravatar.com/avatar/\" stringByAppendingString:md5];\r\n    url = [NSURL URLWithString:url];\r\n    id error;\r\n    id data = [NSData dataWithContentsOfURL:url options:0 error:&error];\r\n    if (error) @throw error;\r\n    self.imageView.image = [UIImage imageWithData:data];\r\n} @catch (id thrownObject) {\r\n    //…\r\n}\r\n```\r\n\r\nError handling with asynchronous code is notoriously tricky. Here's an example using `NSURLConnection`, CoreLocation and MapKit:\r\n\r\n```objc\r\nvoid (^errorHandler)(NSError *) = ^(NSError *error){\r\n    //…\r\n};\r\n\r\n[NSURLConnection sendAsynchronousRequest:rq queue:[NSOperationQueue mainQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {\r\n    if (connectionError) {\r\n        errorHandler(connectionError);\r\n    } else {\r\n        id jsonError;\r\n        id json = [NSJSONSerialization JSONObjectWithData:data options:0 error:&jsonError];\r\n        if (jsonError) {\r\n            errorHandler(jsonError);\r\n        } else {\r\n            id home = [json valueForKeyPath:@\"user.home.address\"];\r\n            [[CLGeocoder new] geocodeAddressString:home completionHandler:^(NSArray *placemarks, NSError *error) {\r\n                if (error) {\r\n                    errorHandler(error);\r\n                } else {\r\n                    MKDirectionsRequest *rq = [MKDirectionsRequest new];\r\n                    rq.source = [MKMapItem mapItemForCurrentLocation];\r\n                    rq.destination = [[MKMapItem alloc] initWithPlacemark:[[MKPlacemark alloc] initWithPlacemark:placemarks[0]]];\r\n                    MKDirections *directions = [[MKDirections alloc] initWithRequest:rq];\r\n                    [directions calculateDirectionsWithCompletionHandler:^(MKDirectionsResponse *response, NSError *error) {\r\n                        if (error) {\r\n                            errorHandler(error);\r\n                        } else {\r\n                            //…\r\n                        }\r\n                    }];\r\n                }\r\n            }];\r\n        }\r\n    }\r\n}];\r\n```\r\n\r\nNot only does this code drift ever rightwards, reducing readability, but it doesn't even handle exceptions that might be thrown (like if there are zero placemarks in the `placemarks` array). The code doesn’t even decode the JSON in a background thread, which may introduce UI lag. But who would want to add *another* closure?\r\n\r\n##Promises Have Elegant Error Handling\r\n\r\n```objc\r\n#import \"PromiseKit.h\"\r\n\r\n[NSURLConnection promise:rq].then(^(id json){\r\n    id home = [json valueForKeyPath:@\"user.home.address\"];\r\n    return [CLGeocoder geocode:home];\r\n}).then(^(NSArray *placemarks){\r\n    MKDirectionsRequest *rq = [MKDirectionsRequest new];\r\n    rq.source = [MKMapItem mapItemForCurrentLocation];\r\n    rq.destination = [[MKMapItem alloc] initWithPlacemark:[[MKPlacemark alloc] initWithPlacemark:placemarks[0]]];\r\n    return [MKDirections promise:rq];\r\n}).then(^(MKDirectionsResponse *directions){\r\n    //…\r\n}).catch(^(NSError *error){\r\n    //…\r\n});\r\n```\r\n\r\nRaised exceptions or `NSError` objects returned from handlers bubble up to the first `catch` handler in the chain.\r\n\r\nThe above makes heavy use of PromiseKit’s category additions to the iOS SDK. Mostly PromiseKit’s categories are logical conversions of block-based or delegation-based patterns to Promises. The exception here is `NSURLConnection+PromiseKit` which detects that the response in JSON (from the HTTP headers) and deserializes the JSON for you in a background thread. All of PromiseKit’s categories are optional CocoaPods subspecs.\r\n\r\n\r\n#Say Goodbye to Asynchronous State Machines\r\n\r\nPromises represent the future value of a task. You can add more than one `then` handler to a promise. Even after the promise has been fulfilled. If the promise already has a value, the then handler is called immediately:\r\n\r\n```objc\r\n@implementation MyViewController {\r\n    Promise *gravatar;\r\n}\r\n\r\n- (void)viewDidLoad {\r\n    gravatar = dispatch_promise(^{\r\n        return md5(email);\r\n    }).then(^(NSString *md5){\r\n        return [NSURLConnection GET:@\"http://gravatar.com/avatar/%@\", md5];\r\n    });\r\n\r\n    gravatar.then(^(UIImage *image){\r\n        self.imageView.image = image;\r\n    });\r\n}\r\n\r\n- (void)someTimeLater {\r\n    gravatar.then(^(UIImage *image){\r\n        // likely called immediately, but maybe not. We don’t have to worry!\r\n        self.otherImageView.image = image;\r\n    });\r\n}\r\n\r\n@end\r\n```\r\n\r\nA key understanding is that Promises can only exist in two states, *pending* or *fulfilled*. The fulfilled state is either a value or an `NSError` object. A Promise can move from pending to fulfilled **exactly once**. Whichever state the Promise is in, you can `then` off it.\r\n\r\n\r\n#Waiting on Multiple Asynchronous Operations\r\n\r\nOne common reason to use asynchronous variants is so we can do two or more asynchronous operations simultaneously. However writing code that acts when all the simultaneous operations have completed is tricky and bug-prone. Not so with PromiseKit:\r\n\r\n```objc\r\nPromise *grabcat = [NSURLConnection GET:@\"http://placekitten.org/%d/%d\", w, h];\r\nPromise *locater = [CLLocationManager promise];\r\n\r\n[Promise when:@[grabcat, locater]].then(^(NSArray *results){\r\n    // results[0] is the `UIImage *` from grabcat\r\n    // results[1] is the `CLLocation *` from locater\r\n}).catch(^(NSError *error){\r\n    // with `when`, if any of the Promises fail, the `catch` handler is executed\r\n    NSArray *suberrors = error.userInfo[PMKThrown];\r\n\r\n    // `suberrors` may not just be `NSError` objects, any promises that succeeded\r\n    // have their success values passed to this handler also. Thus you could\r\n    // return a value from this `catch` and have the Promise chain continue, if\r\n    // you don't care about certain errors or can recover.\r\n});\r\n```\r\n\r\n\r\n#Tolerant to the Max\r\n\r\nThe block you pass to `then` or `catch` can have return type of `Promise`, or any object, or nothing. And it can have a parameter of `id`, or a specific class type, or nothing.\r\n\r\nSo all of these are valid:\r\n\r\n```objc\r\nmyPromise.then(^{\r\n    //…\r\n});\r\n\r\nmyPromise.then(^(id obj){\r\n    //…\r\n});\r\n\r\nmyPromise.then(^(id obj){\r\n    return @1;\r\n});\r\n\r\nmyPromise.then(^{\r\n    return @2;\r\n});\r\n```\r\n\r\nClang is smart so you don’t (usually) have to specify a return type for your block.\r\n\r\nThis is not usual to Objective-C or blocks. Usually everything is very explicit. We are using introspection to determine what arguments and return types you are working with. Thus, programming with PromiseKit has similarities to programming with (more) modern languages like Ruby or Javascript.\r\n\r\nIn fact these (and more) are also fine:\r\n\r\n```objc\r\nmyPromise.then(^{\r\n    return 1;\r\n}).then(^(NSNumber *n){\r\n    assert([n isEqual:@1]);\r\n});\r\n\r\nmyPromise.then(^{\r\n    return false;\r\n}).then(^(NSNumber *n){\r\n    assert([n isEqual:@NO]);\r\n});\r\n```\r\n\r\n\r\n#The Category Additions\r\n\r\nPromiseKit aims to provide a category analog for all one-time asynchronous operations in the iOS SDK.\r\n\r\nNotably we don’t provide a Promise for eg. `UIButton` actions. Promises can only resolve once, and buttons can be pushed again and again.\r\n\r\n\r\n##NSURLConnection+PromiseKit\r\n\r\n```objc\r\n#import \"PromiseKit+Foundation.h\"\r\n\r\n[NSURLConnection GET:@\"http://promisekit.org\"].then(^(NSData *data){\r\n    \r\n}).catch(^(NSError *error){\r\n    NSHTTPURLResponse *rsp = error.userInfo[PMKURLErrorFailingURLResponse];\r\n    int HTTPStatusCode = rsp.statusCode;\r\n});\r\n```\r\n\r\nAnd a convenience string format variant:\r\n\r\n```objc\r\n[NSURLConnection GET:@\"http://example.com/%@\", folder].then(^{\r\n    //…\r\n});\r\n```\r\n\r\nAnd a variant that constructs a correctly URL encoded query string from a dictionary:\r\n\r\n```objc\r\n[NSURLConnection GET:@\"http://example.com\" query:@{@\"foo\": @\"bar\"}].then(^{\r\n    //…\r\n});\r\n```\r\n\r\nAnd a POST variant:\r\n\r\n```objc\r\n[NSURLConnection POST:@\"http://example.com\" formURLEncodedParameters:@{@\"key\": @\"value\"}].then(^{\r\n    //…\r\n});\r\n```\r\n\r\nPromiseKit reads the response headers and decodes the result you actually wanted (in a background thread):\r\n\r\n```objc\r\n[NSURLConnection GET:@\"http://example.com/some.json\"].then(^(NSDictionary *json){\r\n    assert([json isKindOfClass:[NSDictionary class]]);\r\n});\r\n\r\n[NSURLConnection GET:@\"http://placekitten.org/100/100\"].then(^(UIImage *image){\r\n    assert([image isKindOfClass:[UIImage class]]);\r\n});\r\n```\r\n\r\nOtherwise we return the raw `NSData`.\r\n\r\nAnd of course a variant that just takes an `NSURLRequest *`:\r\n\r\n```objc\r\nNSMutableURLRequest *rq = [NSMutableURLRequest requestWithURL:url];\r\n[rq addValue:@\"PromiseKit\" forHTTPHeader:@\"User-Agent\"]; \r\n[NSURLConnection promise:rq].then(^(NSData *data){\r\n    //…\r\n})\r\n```\r\n\r\n\r\n##CLLocationManager+PromiseKit\r\n\r\nA Promise to get the user’s location:\r\n\r\n```objc\r\n#import \"PromiseKit+CoreLocation.h\"\r\n\r\n[CLLocationManager promise].then(^(CLLocation *currentUserLocation){\r\n    //…\r\n}).catch(^(NSError *error){\r\n    //…\r\n});\r\n```\r\n\r\n\r\n##CLGeocoder+PromiseKit\r\n\r\n```objc\r\n#import \"PromiseKit+CoreLocation.h\"\r\n\r\n[CLGeocoder geocode:@\"mount rushmore\"].then(^(NSArray *placemarks){\r\n    //…\r\n}).catch(^(NSError *error){\r\n    //…\r\n});\r\n\r\nCLLocation *someLocation = …;\r\n[CLGeocoder reverseGeocode:someLocation].then(^(NSArray *placemarks){\r\n    //…\r\n}).catch(^(NSError *error){\r\n    //…\r\n});\r\n```\r\n\r\n\r\n##UIAlertView+PromiseKit\r\n\r\nA promise for showing a `UIAlertView`:\r\n\r\n```objc\r\n#import \"PromiseKit+UIKit.h\"\r\n\r\nUIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"You Didn’t Save!\"\r\n                      message:@\"You will lose changes.\"\r\n                     delegate:nil\r\n            cancelButtonTitle:@\"Cancel\"\r\n            otherButtonTitles:@\"Lose Changes\", @\"Panic\", nil];\r\n\r\nalert.promise.then(^(NSNumber *dismissedIndex){\r\n    //…\r\n});\r\n```\r\n\r\nThis Promise will not trigger a `catch` handler. At one point we had the cancel button trigger `catch`, but this led to unreliable error handling. Only errors trigger `catch` handlers.\r\n\r\n##UIActionSheet+PromiseKit\r\n\r\nSame pattern as for `UIAlertView`.\r\n\r\n\r\n##UIViewController+PromiseKit\r\n\r\nWe provide a pattern for modally presenting ViewControllers and getting back a result:\r\n\r\n```objc\r\n#import \"PromiseKit+UIKit.h\"\r\n\r\n@implementation MyRootViewController\r\n\r\n- (void)foo {\r\n    UIViewController *vc = [MyDetailViewController new];\r\n    [self promiseViewController:vc animated:YES completion:nil].then(^(id result){\r\n        // the result from below in `someTimeLater`\r\n        // PromiseKit automatically dismisses the MyDetailViewController\r\n    });\r\n}\r\n\r\n@end\r\n\r\n@implementation MyDetailViewController\r\n\r\n- (void)someTimeLater {\r\n    [self fulfill:someResult];\r\n    \r\n    // if you want to trigger the `catch` use `[self reject:foo]`\r\n}\r\n\r\n@end\r\n```\r\n\r\nAs a bonus if you pass a `MFMailComposeViewController` we handle its delegation behind the scenes and convert it into a Promise:\r\n\r\n```objc\r\nid mailer = [MFMailComposerViewController new];\r\n[self promiseViewController:mailer animated:YES completion:nil].then(^(NSNumber  *num){\r\n    // num is the result passed from the MFMailComposeViewControllerDelegate\r\n}).catch(^{\r\n    // the error from the delegate if that happened\r\n})\r\n```\r\n\r\nPlease submit equivalents for eg. `UIImagePickerController`.\r\n\r\n\r\n##MKDirections+PromiseKit\r\n\r\n```objc\r\n#import \"PromiseKit+MapKit.h\"\r\n\r\nMKDirectionsRequest *rq = [MKDirectionsRequest new];\r\nrq.source = [MKMapItem mapItemForCurrentLocation];\r\nrq.destination = …;\r\n[MKDirections promise:rq].then(^(MKDirectionsResponse *rsp){\r\n    //…\r\n}).catch(^{\r\n    //…\r\n});\r\n\r\n[MKDirections promiseETA:rq].then(^(MKETAResponse *rsp){\r\n    //…\r\n}).catch(^{\r\n    //…\r\n});\r\n```\r\n\r\n\r\n#More Documentation\r\n\r\nCheck out [Promise.h](PromiseKit/Promise.h) and the rest of the sources.\r\n\r\n\r\n#Promizing Your Codebase\r\n\r\nThis:\r\n\r\n```objc\r\n- (void)calculateTenThousandRandomNumbersWithCompletionBlock:(void(^)(NSArray *))completionBlock {\r\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\r\n        NSMutableArray *numbers = [NSMutableArray new];\r\n        for (int x = 0; x < 10000; x++)\r\n            [numbers addObject:@(arc4random())];\r\n        dispatch_async(dispatch_get_main_queue(), ^{\r\n            completionBlock(numbers);\r\n        });\r\n    });\r\n}\r\n\r\n- (void)viewDidLoad {\r\n    [self calculateTenThousandRandomNumbersWithCompletionBlock:^(NSArray *numbers){\r\n        //…\r\n    }];\r\n}\r\n```\r\n\r\nBecomes this:\r\n\r\n```objc\r\n- (Promise *)tenThousandRandomNumbers {\r\n    return dispatch_promise(^{\r\n        NSMutableArray *numbers = [NSMutableArray new];\r\n        for (int x = 0; x < 10000; x++)\r\n            [numbers addObject:@(arc4random())];\r\n        return numbers;\r\n    });\r\n}\r\n\r\n- (void)viewDidLoad {\r\n    self.tenThousandRandomNumbers.then(^(NSArray *numbers){\r\n        //…\r\n    }];\r\n}\r\n```\r\n\r\n##Wrapping e.g. Parse\r\n\r\n```objc\r\n- (Promise *)allUsers {\r\n    return [Promise new:^(PromiseResolver fulfiller, PromiseResolver rejecter){\r\n        PFQuery *query = [PFQuery queryWithClassName:@\"User\"];\r\n        [query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\r\n            if (!error) {\r\n                fulfiller(objects);\r\n            } else {\r\n                rejecter(error);\r\n            }\r\n        }];\r\n    }];\r\n}\r\n```\r\n\r\n`PromiseResolver` is `typedef void (^PromiseResolver)(id)`, i.e. a block that takes a parameter of `id` and returns `void`.\r\n\r\n\r\n#Adding Promises to Third Party Libraries\r\n\r\nIt would be great if every library with asynchronous functionality would offer opt-in `Promise *` variants for the asynchronous mechanisms.\r\n\r\nShould you want to add PromiseKit integration to your library, the general premise is to add an opt-in `subspec` to your `podspec` that provides methods that return `Promise`s. For example if we imagine a library that overlays a kitten on an image:\r\n\r\n```objc\r\n@interface ABCKitten\r\n- (instancetype)initWithImage:(UIImage *)image;\r\n- (void)overlayKittenWithCompletionBlock:(void)(^)(UIImage *, NSError *))completionBlock;\r\n@end\r\n```\r\n\r\nOpt-in PromiseKit support would include a new file `ABCKitten+PromiseKit.h`:\r\n\r\n```objc\r\n#import <PromiseKit/Promise.h>\r\n#import \"ABCKitten.h\"\r\n\r\n\r\n@interface ABCKitten (PromiseKit)\r\n\r\n/**\r\n * Returns a Promise that overlays a kitten image.\r\n * @return A Promise that will `then` a `UIImage *` object.\r\n */\r\n- (Promise *)overlayKitten;\r\n\r\n@end\r\n```\r\n\r\nIt's crucially important to document your Promise methods [properly](http://nshipster.com/documentation/), because subsequent `then`s are not strongly typed, thus the only clue the user has is how you named your method and the documentation they can get when **⌥** clicking that method.\r\n\r\nConsumers of your library would then include in their `Podfile`:\r\n\r\n```ruby\r\npod 'ABCKitten/PromiseKit'\r\n```\r\n\r\nThis is the “opt-in” step.\r\n\r\nFinally you need to modify your `podspec`. If it was something like this:\r\n\r\n```ruby\r\nPod::Spec.new do |s|\r\n  s.name         = \"ABCKitten\"\r\n  s.version      = \"1.1\"\r\n  s.source_files = 'ABCKitten.{m,h}'\r\nend\r\n```\r\n\r\nThen you would need to convert it to the following:\r\n\r\n```ruby\r\nPod::Spec.new do |s|\r\n  s.name         = \"ABCKitten\"\r\n  s.version      = \"1.1\"\r\n\r\n  s.default_subspec = 'base'  # ensures that the PromiseKit additions are opt-in\r\n\r\n  s.subspec 'base' do |ss|\r\n    ss.source_files = 'ABCKitten.{m,h}'\r\n  end\r\n\r\n  s.subspec 'PromiseKit' do |ss|\r\n    ss.dependency 'PromiseKit/base', 'ABCKitten/base'\r\n    ss.source_files = 'ABCKitten+PromiseKit.{m,h}'\r\n  end\r\nend\r\n```\r\n\r\n##Adding PromiseKit to Someone Else’s Pod\r\n\r\nFirstly you should try submitting the above to the project itself. If they won’t add it then you'll need to make your own pod. Use the naming scheme: `ABCKitten+PromiseKit`.\r\n\r\n\r\n#Why PromiseKit?\r\n\r\nThere are other Promise implementations for iOS, but in this author’s opinion, none of them are as pleasant to use as PromiseKit.\r\n\r\n* [Bolts](https://github.com/BoltsFramework/Bolts-iOS) was the inspiration for PromiseKit. I thought that—finally—someone had written a decent Promises implementation for iOS. The lack of dedicated `catch` handler, the (objectively) ugly syntax and the overly complex design was a disappointment. To be fair Bolts is not a Promise implementation, it’s…something else. You may like it, and certainly it is backed by big names™. Fundamentally, Promise-type implementations are not hard to write, so really you’re making a decision based on how flexible the API is while simulatenously producing readable, clean code. I have worked hard to make PromiseKit the best choice.\r\n* [RXPromise](https://github.com/couchdeveloper/RXPromise) is an excellent Promise implementation that is not quite perfect (IMHO). By default thens are executed in background threads, which usually is inconvenient. `then` always return `id` and always take `id`, which makes code less elegant. There is no explicit `catch`, instead `then` always takes two blocks, the second being the error handler, which is ugly. The interface for `Promise` allows any caller to resolve it breaking encapsulation. Otherwise an excellent implementation.\r\n* [CollapsingFutures](https://github.com/Strilanc/ObjC-CollapsingFutures) looks good, but is not thoroughly documented so a thorough review would require further experimentation.\r\n* [Many others](http://cocoapods.org/?q=promise)\r\n\r\nPromiseKit is well tested, and inside apps on the store. It also is fully documented, even within Xcode (⌥ click any method).\r\n\r\n\r\n#Caveats\r\n\r\n* We are version 0.9 and thus reserve the right to remove/change API before 1.0. Probably we won’t; we’re just being prudent by stating this advisory.\r\n* PromiseKit is not thread-safe. This is not intentional, we will fix that. However, in practice the only way to compromise PromiseKit is to keep a pointer to an pending Promise and use that from multiple threads. You can execute thens in many different contexts and the underlying immutability of Promises means PromiseKit is inherently thread-safe.\r\n* If you don't have at least one catch handler in your chain then errors are silently absorbed which may cause you confusion. We intend to log unhandled errors, (with an opt-in method to have them get thrown and thus crash your app in cases where that is desired).\r\n\r\n\r\n#Promises/A+ Compliance\r\n\r\nPromiseKit is [compliant](http://promisesaplus.com) excluding:\r\n\r\n* Our `then` does not take a failure handler, instead we have a dedicated `catch`\r\n\r\nIf you find further non-compliance please open a [ticket](https://github.com/mxcl/PromiseKit/issues/new).\r\n\r\n\r\n#Terminology\r\n\r\n* Promises start in a **pending** state.\r\n* Promises **resolve** to become **fulfilled** or **rejected**.\r\n\r\n\r\n#The Fine Print\r\n\r\nThe fine print of PromiseKit is mostly exactly what you would expect, so don’t confuse yourself: only come back here when you find yourself curious about more advanced techniques.\r\n\r\n* Returning a Promise as the value of a `then` (or `catch`) handler will cause any subsequent handlers to wait for that Promise to resolve.\r\n* Returning an instance of `NSError` or throwing an exception within a then block will cause PromiseKit to bubble that object up to the nearest catch handler.\r\n* `catch` handlers always are passed an `NSError` object.\r\n* Returning something other than an `NSError` from a `catch` handler causes PromiseKit to consider the error “corrected”, and execution will continue at the next `then` handler using the object you returned as the input.\r\n* Not returning from a `catch` handler (or returning nil) causes PromiseKit to consider the Promise complete. No further bubbling occurs.\r\n* Nothing happens if you add a `then` to a failed Promise (unless you subsequently add a `catch` handler to the Promise returned from that `then`)\r\n* Adding a `catch` handler to a failed Promise will execute that fail handler: this is converse to adding the same to a **pending** Promise that has a higher `catch` than the one you just added.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}